{{- range .Values.applications }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "app.serviceName" . }}-dockerfile
  namespace: {{ include "project.namespace" $ }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
    app.kubernetes.io/component: dockerfile
data:
  Dockerfile: |
{{- if .build.gradle }}
    FROM eclipse-temurin:{{ .build.gradle.jdkVersion }}-jdk AS build
    
    WORKDIR /app
    
    ENV GRADLE_USER_HOME="/app/.gradle"
    ENV KOTLIN_USER_HOME="/app/.kotlin"
    ENV KOTLIN_COMPILER_EXECUTION_STRATEGY="in-process"
    ENV KOTLIN_DAEMON_DISABLED=true
    ENV GRADLE_OPTS="-Dkotlin.daemon.enabled=false -Dorg.gradle.daemon=false"
    
    COPY {{ .build.gradle.buildDir }}/ .
    RUN chmod +x gradlew
    
    RUN {{ .build.gradle.buildCommand }}
    
    RUN rm -rf .gradle .kotlin /root/.gradle /root/.kotlin
    
    FROM eclipse-temurin:{{ .build.gradle.jdkVersion }}-jre-alpine
    
    ENV TZ=Asia/Seoul
    ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
    
    WORKDIR /app
    
    COPY --from=build /app{{ .build.gradle.outputDir }} /tmp/libs/
    RUN find /tmp/libs -name "*.jar" ! -name "*-plain.jar" -exec cp {} /app/app.jar \; && \
        rm -rf /tmp/libs
    
    
    ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar /app/app.jar"]
{{- else if .build.nodejs }}
    FROM node:{{ .build.nodejs.nodeVersion }} AS build
    
    WORKDIR /app
    
    COPY . .
    
    RUN {{ .build.nodejs.buildCommand }}
    
    FROM node:{{ .build.nodejs.nodeVersion }}
    
    WORKDIR /app
    
    COPY --from=build /app .
    
    
    CMD {{ .build.nodejs.command | split " " | toJson }}
{{- else if .build.react }}
    FROM node:{{ .build.react.nodeVersion }} AS build
    
    WORKDIR /app
    
    COPY . .
    
    RUN {{ .build.react.buildCommand }}
    
    FROM nginx:alpine
    
    COPY --from=build /app/build /usr/share/nginx/html
    
    RUN echo 'server { listen 8080; location / { root /usr/share/nginx/html; index index.html; try_files $uri $uri/ /index.html; } }' > /etc/nginx/conf.d/default.conf
    
    CMD ["nginx", "-g", "daemon off;"]
{{- else if .build.vite }}
    FROM node:{{ .build.vite.nodeVersion }} AS build
    
    WORKDIR /app
    
    COPY . .
    
    RUN {{ .build.vite.buildCommand }}
    
    FROM nginx:alpine
    
    COPY --from=build /app/dist /usr/share/nginx/html
    
    RUN echo 'server { listen 8080; location / { root /usr/share/nginx/html; index index.html; try_files $uri $uri/ /index.html; } }' > /etc/nginx/conf.d/default.conf
    
    CMD ["nginx", "-g", "daemon off;"]
{{- else if .build.vue }}
    FROM node:{{ .build.vue.nodeVersion }} AS build
    
    WORKDIR /app
    
    COPY . .
    
    RUN {{ .build.vue.buildCommand }}
    
    FROM nginx:alpine
    
    COPY --from=build /app/dist /usr/share/nginx/html
    
    RUN echo 'server { listen 8080; location / { root /usr/share/nginx/html; index index.html; try_files $uri $uri/ /index.html; } }' > /etc/nginx/conf.d/default.conf
    
    CMD ["nginx", "-g", "daemon off;"]
{{- else if .build.nextjs }}
    FROM node:{{ .build.nextjs.nodeVersion }} AS build
    
    WORKDIR /app
    
    COPY . .
    
    RUN {{ .build.nextjs.buildCommand }}
    
    FROM node:{{ .build.nextjs.nodeVersion }}
    
    WORKDIR /app
    
    COPY --from=build /app/.next ./.next
    COPY --from=build /app/public ./public
    COPY --from=build /app/package*.json ./
    
    
    CMD ["npm", "start"]
{{- else if .build.go }}
    FROM golang:{{ .build.go.goVersion }} AS build
    
    WORKDIR /app
    
    COPY . .
    
    RUN {{ .build.go.buildCommand }}
    
    FROM alpine:latest
    
    RUN apk --no-cache add ca-certificates
    
    WORKDIR /root/
    
    COPY --from=build /app/main .
    
    
    CMD ["./main"]
{{- else if .build.rust }}
    FROM rust:{{ .build.rust.rustVersion }} AS build
    
    WORKDIR /app
    
    COPY . .
    
    RUN {{ .build.rust.buildCommand }}
    
    FROM debian:bookworm-slim
    
    WORKDIR /app
    
    COPY --from=build /app/target/release/app .
    
    
    CMD ["./app"]
{{- else if .build.maven }}
    FROM eclipse-temurin:{{ .build.maven.jdkVersion }}-jdk AS build
    
    WORKDIR /app
    
    COPY . .
    
    RUN {{ .build.maven.buildCommand }}
    
    FROM eclipse-temurin:{{ .build.maven.jdkVersion }}-jre-alpine
    
    WORKDIR /app
    
    COPY --from=build /app/target/*.jar app.jar
    
    
    ENTRYPOINT ["java", "-jar", "/app/app.jar"]
{{- else if .build.django }}
    FROM python:{{ .build.django.pythonVersion }}
    
    WORKDIR /app
    
    COPY . .
    
    RUN {{ .build.django.buildCommand }}
    
    
    CMD ["python", "manage.py", "runserver", "0.0.0.0:{{ .build.django.port }}"]
{{- else if .build.flask }}
    FROM python:{{ .build.flask.pythonVersion }}
    
    WORKDIR /app
    
    COPY . .
    
    RUN {{ .build.flask.buildCommand }}
    
    
    CMD ["python", "app.py"]
{{- else }}
    FROM alpine:latest
    
    
    CMD ["echo", "No build configuration found"]
{{- end }}
{{- end }}