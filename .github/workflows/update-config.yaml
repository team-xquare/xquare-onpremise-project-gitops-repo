# ------------------------------
# Configuration API 워크플로우
#
# 본 GitHub Actions 워크플로우는 GitOps 기반 환경에서 애플리케이션의 설정
# 요청을 처리하는 기능을 수행합니다. 이 워크플로우는 "config-api" 타입의
# repository_dispatch 이벤트를 수신하고, 해당 페이로드에 지정된 액션에 따라
# 필요한 작업을 수행합니다.
#
# 지원되는 액션:
#  - apply: 지정된 애플리케이션의 설정을 추가하거나 업데이트합니다.
#  - remove: 특정 애플리케이션의 설정을 제거합니다.
#
# 새로운 구조에서 사용 예시:
#  - 애플리케이션의 imageTag를 업데이트하는 경우:
#      github.event.client_payload.path: "projects/project-name/applications/service-name"
#      github.event.client_payload.action: "apply"
#      github.event.client_payload.spec:
#        {
#          "imageTag": "abc123def"
#        }
#
#  - 애플리케이션의 전체 설정을 업데이트하는 경우:
#      github.event.client_payload.path: "projects/project-name/applications/service-name"
#      github.event.client_payload.action: "apply"
#      github.event.client_payload.spec:
#        {
#          "imageTag": "latest",
#          "containerPort": 8080,
#          "instanceType": "x3.small",
#          "privateService": false,
#          "domain": "service.dsmhs.kr"
#        }
#
#  - 애플리케이션 설정을 제거하는 경우:
#      github.event.client_payload.path: "projects/project-name/applications/service-name"
#      github.event.client_payload.action: "remove"
#
# 이 워크플로우는 아래와 같은 절차로 작업을 수행합니다:
#  1. 페이로드에서 지정된 액션을 확인합니다.
#  2. projects/{project}.yaml 파일에서 해당 애플리케이션을 찾아 설정을 적용하거나 제거합니다.
#  3. 변경 사항을 커밋하고 푸시하여 변경된 내용을 저장합니다.
# ------------------------------

name: Configuration API

on:
  repository_dispatch:
    types: [config-api]

jobs:
  handle-request:
    runs-on: ubuntu-latest
    concurrency:
      group: config-update
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v3

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Process Request
        run: |
          PATH_PARAMS="${{ github.event.client_payload.path }}"
          ACTION="${{ github.event.client_payload.action }}"
          SPEC='${{ toJson(github.event.client_payload.spec) }}'

          echo "Processing request: $ACTION $PATH_PARAMS"
          echo "Spec: $SPEC"

          IFS='/' read -r -a PATH_ARRAY <<< "$PATH_PARAMS"
          # PATH_PARAMS format: projects/project-name/applications/service-name
          PROJECT="${PATH_ARRAY[1]}"
          SERVICE_NAME="${PATH_ARRAY[3]}"

          PROJECT_FILE="projects/$PROJECT.yaml"

          case "$ACTION" in
            "apply")
              if [ ! -f "$PROJECT_FILE" ]; then
                echo "Error: Project file $PROJECT_FILE does not exist"
                exit 1
              fi
              
              # Find the application in the applications array and update it
              TEMP_FILE=$(mktemp)
              
              # Check if the service exists in the applications array
              SERVICE_INDEX=$(yq eval ".applications | to_entries | map(select(.value.name == \"$SERVICE_NAME\")) | .[0].key" "$PROJECT_FILE")
              
              if [ "$SERVICE_INDEX" != "null" ]; then
                # Update existing service
                echo "$SPEC" | yq eval -P > /tmp/spec.yaml
                
                # Merge the spec into the existing application
                while IFS= read -r key; do
                  if [ "$key" != "null" ]; then
                    value=$(yq eval ".$key" /tmp/spec.yaml)
                    # Handle string values by properly quoting them
                    if yq eval ".$key | type" /tmp/spec.yaml | grep -q "string"; then
                      VALUE="$value" yq eval ".applications[$SERVICE_INDEX].$key = strenv(VALUE)" -i "$PROJECT_FILE"
                    else
                      yq eval ".applications[$SERVICE_INDEX].$key = $value" -i "$PROJECT_FILE"
                    fi
                  fi
                done < <(yq eval 'keys | .[]' /tmp/spec.yaml)
              else
                echo "Error: Service $SERVICE_NAME not found in project $PROJECT"
                exit 1
              fi
              
              # Format the file
              yq -P "$PROJECT_FILE" > "$TEMP_FILE"
              mv "$TEMP_FILE" "$PROJECT_FILE"
              ;;

            "remove")
              if [ ! -f "$PROJECT_FILE" ]; then
                echo "Project file $PROJECT_FILE does not exist, nothing to remove"
                exit 0
              fi
              
              # Remove the application from the applications array
              yq eval ".applications = (.applications | map(select(.name != \"$SERVICE_NAME\")))" -i "$PROJECT_FILE"
              
              # If no applications left, remove the project file
              APP_COUNT=$(yq eval ".applications | length" "$PROJECT_FILE")
              if [ "$APP_COUNT" = "0" ]; then
                rm "$PROJECT_FILE"
              fi
              ;;
              
            *)
              echo "Unsupported action: $ACTION"
              exit 1
              ;;
          esac

      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config user.name "XQUARE GitOps Bot"
          git config user.email "teamxquare@gmail.com"
          git add .
          git commit -m "${{ github.event.client_payload.action }} ${{ github.event.client_payload.path }}"
          git push
