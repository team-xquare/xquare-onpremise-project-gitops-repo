{{- range .Values.applications }}
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: {{ include "app.serviceName" . }}-sensor
  namespace: {{ include "project.namespace" $ }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
    app.kubernetes.io/component: ci-sensor
spec:
  dependencies:
    - name: {{ include "app.serviceName" . }}-github-event
      eventName: {{ include "ci.githubFullname" . }}
      eventSourceName: {{ include "app.serviceName" . }}-github-webhook
      filters:
        script: |
          if event.body['X-GitHub-Event'] == 'ping' then return true end
          print("event.body.ref=" .. tostring(event.body.ref))
          print("expected=refs/heads/{{ .github.branch }}")
          print("X-GitHub-Event=" .. tostring(event.body['X-GitHub-Event']))
          if event.body.ref ~= 'refs/heads/{{ .github.branch }}' or event.body['X-GitHub-Event'] ~= 'push' then
            print("Branch or event type check failed")
            return false
          end
          {{- if .github.triggerPaths }}
          local function matchesPath(files, patterns)
            if not patterns or #patterns == 0 then return true end
            local paths = {}
            for _, list in pairs(files) do for _, p in ipairs(list or {}) do table.insert(paths, p) end end
            if #paths == 0 then return false end
            local inc, exc = {}, {}
            for _, pat in ipairs(patterns) do
              if pat:sub(1,1) == "!" then table.insert(exc, pat:sub(2)) else table.insert(inc, pat) end
            end
            local hasIncludes = #inc > 0
            for _, path in ipairs(paths) do
              local match = not hasIncludes
              if hasIncludes then
                for _, pat in ipairs(inc) do
                  local regex = "^" .. pat:gsub("%*%*%/", ".*/"):gsub("%*%*", ".*"):gsub("%*", "[^/]*") .. "$"
                  if path:match(regex) then
                    match = true break
                  end
                end
              end
              if match then
                local excluded = false
                for _, pat in ipairs(exc) do
                  local regex = "^" .. pat:gsub("%*%*%/", ".*/"):gsub("%*%*", ".*"):gsub("%*", "[^/]*") .. "$"
                  if path:match(regex) then
                    excluded = true break
                  end
                end
                if not excluded then return true end
              end
            end
            return false
          end
          
          local changedFiles = {added={}, modified={}, removed={}}

          if event.body.commits then
            for _, commit in ipairs(event.body.commits) do
              for _, f in ipairs(commit.added or {}) do table.insert(changedFiles.added, f) end
              for _, f in ipairs(commit.modified or {}) do table.insert(changedFiles.modified, f) end
              for _, f in ipairs(commit.removed or {}) do table.insert(changedFiles.removed, f) end
            end
          end

          if #changedFiles.added == 0 and #changedFiles.modified == 0 and #changedFiles.removed == 0 then
            if event.body.head_commit then
              for _, f in ipairs(event.body.head_commit.added or {}) do table.insert(changedFiles.added, f) end
              for _, f in ipairs(event.body.head_commit.modified or {}) do table.insert(changedFiles.modified, f) end
              for _, f in ipairs(event.body.head_commit.removed or {}) do table.insert(changedFiles.removed, f) end
            end
          end
          
          return matchesPath(changedFiles, { {{- range $i, $path := .github.triggerPaths }}{{if $i}}, {{end}}"{{$path}}"{{- end}} })
          {{- else }}
          return true
          {{- end }}
  
  eventBusName: ci-eventbus
  template:
    serviceAccountName: kaniko-sa
    container:
      resources:
        requests:
          cpu: 10m
          memory: 30Mi
        limits:
          cpu: 50m
          memory: 60Mi
  
  triggers:
    - retryStrategy:
        steps: 3
      template:
        k8s:
          operation: create
          parameters:
            - src:
                dependencyName: {{ include "app.serviceName" . }}-github-event
                dataKey: body.X-GitHub-Event
                value: ""
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: {{ include "app.serviceName" . }}-github-event
                dataKey: body.after
                value: ""
              dest: spec.arguments.parameters.1.value
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: {{ include "app.serviceName" . }}-ci-
                namespace: {{ include "project.namespace" $ }}
                labels:
                  {{- include "app.selectorLabels" . | nindent 18 }}
                  app.kubernetes.io/component: ci-workflow
              spec:
                workflowTemplateRef:
                  name: {{ include "app.serviceName" . }}-ci-pipeline-template
                arguments:
                  parameters:
                    - name: github-event-type
                      value: ""
                    - name: github-sha
                      value: ""
                podGC:
                  strategy: OnPodCompletion
                  deleteDelayDuration: 72h
                serviceAccountName: kaniko-sa
        name: {{ include "app.serviceName" . }}-workflow-trigger
{{- end }}